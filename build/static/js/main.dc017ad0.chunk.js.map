{"version":3,"sources":["web3.js","election.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","election","eth","Contract","JSON","parse","App","state","candidateId","message","bjpVotes","incVotes","aapVotes","sipVotes","notaVotes","onVote","_callee","event","accounts","regenerator_default","a","wrap","_context","prev","next","preventDefault","getAccounts","sent","_this","setState","methods","vote","send","from","t0","toString","includes","abrupt","stop","this","candidates","call","_this2","react_default","createElement","onSubmit","value","onChange","target","voteCount","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0YAIeA,EAFF,WAAIC,GAAKC,OAAOF,KAAKG,iBCEnBC,EAAA,IAAIJ,EAAKK,IAAIC,SAASC,KAAKC,MAD9B,0zBADI,8CCuFDC,6MAnFXC,MAAQ,CACJC,YAAa,GACbC,QAAS,GACTC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,UAAW,KAcfC,6CAAS,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLP,EAAMQ,iBADDH,EAAAE,KAAA,EAEkB3B,EAAKK,IAAIwB,cAF3B,cAECR,EAFDI,EAAAK,KAGLC,EAAKC,SAAS,CAACpB,QAAS,wDAHnBa,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAKKvB,EAAS6B,QAAQC,KAAKH,EAAKrB,MAAMC,aAAawB,KAAK,CAACC,KAAMf,EAAS,KALxE,OAAAI,EAAAE,KAAA,oBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,UAOGA,EAAAY,GAAEC,WAAWC,SAAS,UAPzB,CAAAd,EAAAE,KAAA,gBAQGI,EAAKC,SAAS,CAAEpB,QAAS,4BAR5Ba,EAAAe,OAAA,kBAWDT,EAAKC,SAAS,CAAEpB,QAAS,0CAXxB,QAcLmB,EAAKC,SAAS,CAACpB,QAAS,wCAdnB,yBAAAa,EAAAgB,SAAAtB,EAAAuB,KAAA,8QAVkB1C,EAAKK,IAAIwB,wCAChCa,cACoBtC,EAAS6B,QAAQU,WAAW,GAAGC,0CAC/BxC,EAAS6B,QAAQU,WAAW,GAAGC,2CAC/BxC,EAAS6B,QAAQU,WAAW,GAAGC,4CAC/BxC,EAAS6B,QAAQU,WAAW,GAAGC,4CAC9BxC,EAAS6B,QAAQU,WAAW,GAAGC,iCAJhD/B,cACAC,cACAC,cACAC,cACAC,qBALCe,6JA0BA,IAAAa,EAAAH,KACL,OACII,EAAAvB,EAAAwB,cAAA,WACID,EAAAvB,EAAAwB,cAAA,qCAEAD,EAAAvB,EAAAwB,cAAA,WAEAD,EAAAvB,EAAAwB,cAAA,QAAMC,SAAUN,KAAKxB,QACjB4B,EAAAvB,EAAAwB,cAAA,2EACAD,EAAAvB,EAAAwB,cAAA,UACID,EAAAvB,EAAAwB,cAAA,iBACAD,EAAAvB,EAAAwB,cAAA,iBACAD,EAAAvB,EAAAwB,cAAA,iBACAD,EAAAvB,EAAAwB,cAAA,iBACAD,EAAAvB,EAAAwB,cAAA,mBAGJD,EAAAvB,EAAAwB,cAAA,WACID,EAAAvB,EAAAwB,cAAA,6DACAD,EAAAvB,EAAAwB,cAAA,SACIE,MAAOP,KAAKhC,MAAMC,YAClBuC,SAAU,SAAA9B,GAAK,OAAIyB,EAAKb,SAAS,CAACrB,YAAaS,EAAM+B,OAAOF,YAGpEH,EAAAvB,EAAAwB,cAAA,uBAGJD,EAAAvB,EAAAwB,cAAA,WAEAD,EAAAvB,EAAAwB,cAAA,UAAKL,KAAKhC,MAAME,SAEhBkC,EAAAvB,EAAAwB,cAAA,WAEAD,EAAAvB,EAAAwB,cAAA,UACID,EAAAvB,EAAAwB,cAAA,sCAA8BL,KAAKhC,MAAMG,SAASuC,WAClDN,EAAAvB,EAAAwB,cAAA,sCAA8BL,KAAKhC,MAAMI,SAASsC,WAClDN,EAAAvB,EAAAwB,cAAA,sCAA8BL,KAAKhC,MAAMK,SAASqC,WAClDN,EAAAvB,EAAAwB,cAAA,sCAA8BL,KAAKhC,MAAMM,SAASoC,WAClDN,EAAAvB,EAAAwB,cAAA,uCAA+BL,KAAKhC,MAAMO,UAAUmC,oBA7EtDC,aCOEC,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAvB,EAAAwB,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc017ad0.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0x939de7b82C7F3Db4E32Ce0C76A3a43A60b2967bD';\nconst abi = '[{\"constant\":false,\"inputs\":[{\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidatesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"voteCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]';\nexport default new web3.eth.Contract(JSON.parse(abi), address);","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport election from './election';\n\nclass App extends Component {\n    state = {\n        candidateId: '',\n        message: '',\n        bjpVotes: 0,\n        incVotes: 0,\n        aapVotes: 0,\n        sipVotes: 0,\n        notaVotes: 0\n    };\n\n    async componentDidMount() {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n            bjpVotes: await election.methods.candidates(1).call(),\n            incVotes: await election.methods.candidates(2).call(),\n            aapVotes: await election.methods.candidates(3).call(),\n            sipVotes: await election.methods.candidates(4).call(),\n            notaVotes: await election.methods.candidates(5).call()\n        });\n    }\n\n    onVote = async event => {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({message: 'Casting your vote... Please wait for 15-30 seconds.'});\n        try {\n            await election.methods.vote(this.state.candidateId).send({from: accounts[0]});\n        } catch (e) {\n            if (e.toString().includes('revert')) {\n                this.setState({ message: 'You may not vote twice.'});\n                return\n            }\n            this.setState({ message: 'Your vote has been successfully cast.'})\n        }\n\n        this.setState({message: 'Transaction successfully processed.'});\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Vote for your candidate</h2>\n\n                <hr/>\n\n                <form onSubmit={this.onVote}>\n                    <h4>Vote for your preferred candidate. The available options are:</h4>\n                    <ol>\n                        <li>BJP</li>\n                        <li>INC</li>\n                        <li>AAP</li>\n                        <li>SIP</li>\n                        <li>NOTA</li>\n                    </ol>\n\n                    <div>\n                        <label>S.no of the candidate you want to vote for: </label>\n                        <input\n                            value={this.state.candidateId}\n                            onChange={event => this.setState({candidateId: event.target.value})}\n                        />\n                    </div>\n                    <button>Vote</button>\n                </form>\n\n                <hr/>\n\n                <h1>{this.state.message}</h1>\n\n                <hr/>\n\n                <ul>\n                    <li>Number of votes for BJP: {this.state.bjpVotes.voteCount}</li>\n                    <li>Number of votes for INC: {this.state.incVotes.voteCount}</li>\n                    <li>Number of votes for AAP: {this.state.aapVotes.voteCount}</li>\n                    <li>Number of votes for SIP: {this.state.sipVotes.voteCount}</li>\n                    <li>Number of votes for NOTA: {this.state.notaVotes.voteCount}</li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}